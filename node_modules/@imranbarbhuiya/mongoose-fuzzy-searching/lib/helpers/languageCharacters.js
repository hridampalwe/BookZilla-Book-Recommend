"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var letters = __importStar(require("./letters.json"));
var handleGreekIdioms = function (ch, nextCh) {
    var found = false;
    var letter = "";
    if (!nextCh) {
        return { letter: letters[ch], found: found };
    }
    if (["α", "ά", "ε", "έ", "γ", "η", "ή"].includes(ch)) {
        letter = letters["".concat(ch).concat(nextCh)];
        found = !!letter;
    }
    return { letter: letter || letters[ch], found: found };
};
exports.default = (function (word) {
    if (!word) {
        return "";
    }
    var newWord = "";
    var index = 0;
    word = word.toLowerCase();
    while (index < word.length) {
        var ch = word[index];
        var nextCh = word[index + 1];
        var idiom = false;
        if (!letters[ch]) {
            newWord += ch;
        }
        else {
            var _a = handleGreekIdioms(ch, nextCh), letter = _a.letter, found = _a.found;
            newWord += letter;
            idiom = found;
        }
        index = idiom ? index + 2 : index + 1;
    }
    return newWord;
});
